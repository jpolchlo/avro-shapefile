/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.adapter.vector.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AttributeValues extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8572073377285983977L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AttributeValues\",\"namespace\":\"mil.nga.giat.geowave.adapter.vector.avro\",\"fields\":[{\"name\":\"fid\",\"type\":\"string\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}},{\"name\":\"classifications\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence fid;
  @Deprecated public java.util.List<java.nio.ByteBuffer> values;
  @Deprecated public java.util.List<java.lang.CharSequence> classifications;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AttributeValues() {}

  /**
   * All-args constructor.
   * @param fid The new value for fid
   * @param values The new value for values
   * @param classifications The new value for classifications
   */
  public AttributeValues(java.lang.CharSequence fid, java.util.List<java.nio.ByteBuffer> values, java.util.List<java.lang.CharSequence> classifications) {
    this.fid = fid;
    this.values = values;
    this.classifications = classifications;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fid;
    case 1: return values;
    case 2: return classifications;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fid = (java.lang.CharSequence)value$; break;
    case 1: values = (java.util.List<java.nio.ByteBuffer>)value$; break;
    case 2: classifications = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fid' field.
   * @return The value of the 'fid' field.
   */
  public java.lang.CharSequence getFid() {
    return fid;
  }

  /**
   * Sets the value of the 'fid' field.
   * @param value the value to set.
   */
  public void setFid(java.lang.CharSequence value) {
    this.fid = value;
  }

  /**
   * Gets the value of the 'values' field.
   * @return The value of the 'values' field.
   */
  public java.util.List<java.nio.ByteBuffer> getValues() {
    return values;
  }

  /**
   * Sets the value of the 'values' field.
   * @param value the value to set.
   */
  public void setValues(java.util.List<java.nio.ByteBuffer> value) {
    this.values = value;
  }

  /**
   * Gets the value of the 'classifications' field.
   * @return The value of the 'classifications' field.
   */
  public java.util.List<java.lang.CharSequence> getClassifications() {
    return classifications;
  }

  /**
   * Sets the value of the 'classifications' field.
   * @param value the value to set.
   */
  public void setClassifications(java.util.List<java.lang.CharSequence> value) {
    this.classifications = value;
  }

  /**
   * Creates a new AttributeValues RecordBuilder.
   * @return A new AttributeValues RecordBuilder
   */
  public static mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder newBuilder() {
    return new mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder();
  }

  /**
   * Creates a new AttributeValues RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AttributeValues RecordBuilder
   */
  public static mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder newBuilder(mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder other) {
    return new mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder(other);
  }

  /**
   * Creates a new AttributeValues RecordBuilder by copying an existing AttributeValues instance.
   * @param other The existing instance to copy.
   * @return A new AttributeValues RecordBuilder
   */
  public static mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder newBuilder(mil.nga.giat.geowave.adapter.vector.avro.AttributeValues other) {
    return new mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder(other);
  }

  /**
   * RecordBuilder for AttributeValues instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AttributeValues>
    implements org.apache.avro.data.RecordBuilder<AttributeValues> {

    private java.lang.CharSequence fid;
    private java.util.List<java.nio.ByteBuffer> values;
    private java.util.List<java.lang.CharSequence> classifications;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fid)) {
        this.fid = data().deepCopy(fields()[0].schema(), other.fid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.values)) {
        this.values = data().deepCopy(fields()[1].schema(), other.values);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.classifications)) {
        this.classifications = data().deepCopy(fields()[2].schema(), other.classifications);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AttributeValues instance
     * @param other The existing instance to copy.
     */
    private Builder(mil.nga.giat.geowave.adapter.vector.avro.AttributeValues other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fid)) {
        this.fid = data().deepCopy(fields()[0].schema(), other.fid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.values)) {
        this.values = data().deepCopy(fields()[1].schema(), other.values);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.classifications)) {
        this.classifications = data().deepCopy(fields()[2].schema(), other.classifications);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'fid' field.
      * @return The value.
      */
    public java.lang.CharSequence getFid() {
      return fid;
    }

    /**
      * Sets the value of the 'fid' field.
      * @param value The value of 'fid'.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder setFid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.fid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fid' field has been set.
      * @return True if the 'fid' field has been set, false otherwise.
      */
    public boolean hasFid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fid' field.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder clearFid() {
      fid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'values' field.
      * @return The value.
      */
    public java.util.List<java.nio.ByteBuffer> getValues() {
      return values;
    }

    /**
      * Sets the value of the 'values' field.
      * @param value The value of 'values'.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder setValues(java.util.List<java.nio.ByteBuffer> value) {
      validate(fields()[1], value);
      this.values = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'values' field has been set.
      * @return True if the 'values' field has been set, false otherwise.
      */
    public boolean hasValues() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'values' field.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder clearValues() {
      values = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'classifications' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getClassifications() {
      return classifications;
    }

    /**
      * Sets the value of the 'classifications' field.
      * @param value The value of 'classifications'.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder setClassifications(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.classifications = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'classifications' field has been set.
      * @return True if the 'classifications' field has been set, false otherwise.
      */
    public boolean hasClassifications() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'classifications' field.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.AttributeValues.Builder clearClassifications() {
      classifications = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public AttributeValues build() {
      try {
        AttributeValues record = new AttributeValues();
        record.fid = fieldSetFlags()[0] ? this.fid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.values = fieldSetFlags()[1] ? this.values : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[1]);
        record.classifications = fieldSetFlags()[2] ? this.classifications : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

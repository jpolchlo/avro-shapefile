/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.adapter.vector.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FeatureDefinition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5292109840622202065L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FeatureDefinition\",\"namespace\":\"mil.nga.giat.geowave.adapter.vector.avro\",\"fields\":[{\"name\":\"featureTypeName\",\"type\":\"string\"},{\"name\":\"attributeNames\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"attributeTypes\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"attributeDefaultClassifications\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence featureTypeName;
  @Deprecated public java.util.List<java.lang.CharSequence> attributeNames;
  @Deprecated public java.util.List<java.lang.CharSequence> attributeTypes;
  @Deprecated public java.util.List<java.lang.CharSequence> attributeDefaultClassifications;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FeatureDefinition() {}

  /**
   * All-args constructor.
   * @param featureTypeName The new value for featureTypeName
   * @param attributeNames The new value for attributeNames
   * @param attributeTypes The new value for attributeTypes
   * @param attributeDefaultClassifications The new value for attributeDefaultClassifications
   */
  public FeatureDefinition(java.lang.CharSequence featureTypeName, java.util.List<java.lang.CharSequence> attributeNames, java.util.List<java.lang.CharSequence> attributeTypes, java.util.List<java.lang.CharSequence> attributeDefaultClassifications) {
    this.featureTypeName = featureTypeName;
    this.attributeNames = attributeNames;
    this.attributeTypes = attributeTypes;
    this.attributeDefaultClassifications = attributeDefaultClassifications;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return featureTypeName;
    case 1: return attributeNames;
    case 2: return attributeTypes;
    case 3: return attributeDefaultClassifications;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: featureTypeName = (java.lang.CharSequence)value$; break;
    case 1: attributeNames = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: attributeTypes = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: attributeDefaultClassifications = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'featureTypeName' field.
   * @return The value of the 'featureTypeName' field.
   */
  public java.lang.CharSequence getFeatureTypeName() {
    return featureTypeName;
  }

  /**
   * Sets the value of the 'featureTypeName' field.
   * @param value the value to set.
   */
  public void setFeatureTypeName(java.lang.CharSequence value) {
    this.featureTypeName = value;
  }

  /**
   * Gets the value of the 'attributeNames' field.
   * @return The value of the 'attributeNames' field.
   */
  public java.util.List<java.lang.CharSequence> getAttributeNames() {
    return attributeNames;
  }

  /**
   * Sets the value of the 'attributeNames' field.
   * @param value the value to set.
   */
  public void setAttributeNames(java.util.List<java.lang.CharSequence> value) {
    this.attributeNames = value;
  }

  /**
   * Gets the value of the 'attributeTypes' field.
   * @return The value of the 'attributeTypes' field.
   */
  public java.util.List<java.lang.CharSequence> getAttributeTypes() {
    return attributeTypes;
  }

  /**
   * Sets the value of the 'attributeTypes' field.
   * @param value the value to set.
   */
  public void setAttributeTypes(java.util.List<java.lang.CharSequence> value) {
    this.attributeTypes = value;
  }

  /**
   * Gets the value of the 'attributeDefaultClassifications' field.
   * @return The value of the 'attributeDefaultClassifications' field.
   */
  public java.util.List<java.lang.CharSequence> getAttributeDefaultClassifications() {
    return attributeDefaultClassifications;
  }

  /**
   * Sets the value of the 'attributeDefaultClassifications' field.
   * @param value the value to set.
   */
  public void setAttributeDefaultClassifications(java.util.List<java.lang.CharSequence> value) {
    this.attributeDefaultClassifications = value;
  }

  /**
   * Creates a new FeatureDefinition RecordBuilder.
   * @return A new FeatureDefinition RecordBuilder
   */
  public static mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder newBuilder() {
    return new mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder();
  }

  /**
   * Creates a new FeatureDefinition RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FeatureDefinition RecordBuilder
   */
  public static mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder newBuilder(mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder other) {
    return new mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder(other);
  }

  /**
   * Creates a new FeatureDefinition RecordBuilder by copying an existing FeatureDefinition instance.
   * @param other The existing instance to copy.
   * @return A new FeatureDefinition RecordBuilder
   */
  public static mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder newBuilder(mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition other) {
    return new mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder(other);
  }

  /**
   * RecordBuilder for FeatureDefinition instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FeatureDefinition>
    implements org.apache.avro.data.RecordBuilder<FeatureDefinition> {

    private java.lang.CharSequence featureTypeName;
    private java.util.List<java.lang.CharSequence> attributeNames;
    private java.util.List<java.lang.CharSequence> attributeTypes;
    private java.util.List<java.lang.CharSequence> attributeDefaultClassifications;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.featureTypeName)) {
        this.featureTypeName = data().deepCopy(fields()[0].schema(), other.featureTypeName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.attributeNames)) {
        this.attributeNames = data().deepCopy(fields()[1].schema(), other.attributeNames);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attributeTypes)) {
        this.attributeTypes = data().deepCopy(fields()[2].schema(), other.attributeTypes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.attributeDefaultClassifications)) {
        this.attributeDefaultClassifications = data().deepCopy(fields()[3].schema(), other.attributeDefaultClassifications);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FeatureDefinition instance
     * @param other The existing instance to copy.
     */
    private Builder(mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.featureTypeName)) {
        this.featureTypeName = data().deepCopy(fields()[0].schema(), other.featureTypeName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.attributeNames)) {
        this.attributeNames = data().deepCopy(fields()[1].schema(), other.attributeNames);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.attributeTypes)) {
        this.attributeTypes = data().deepCopy(fields()[2].schema(), other.attributeTypes);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.attributeDefaultClassifications)) {
        this.attributeDefaultClassifications = data().deepCopy(fields()[3].schema(), other.attributeDefaultClassifications);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'featureTypeName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFeatureTypeName() {
      return featureTypeName;
    }

    /**
      * Sets the value of the 'featureTypeName' field.
      * @param value The value of 'featureTypeName'.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder setFeatureTypeName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.featureTypeName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'featureTypeName' field has been set.
      * @return True if the 'featureTypeName' field has been set, false otherwise.
      */
    public boolean hasFeatureTypeName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'featureTypeName' field.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder clearFeatureTypeName() {
      featureTypeName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributeNames' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAttributeNames() {
      return attributeNames;
    }

    /**
      * Sets the value of the 'attributeNames' field.
      * @param value The value of 'attributeNames'.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder setAttributeNames(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.attributeNames = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'attributeNames' field has been set.
      * @return True if the 'attributeNames' field has been set, false otherwise.
      */
    public boolean hasAttributeNames() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'attributeNames' field.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder clearAttributeNames() {
      attributeNames = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributeTypes' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAttributeTypes() {
      return attributeTypes;
    }

    /**
      * Sets the value of the 'attributeTypes' field.
      * @param value The value of 'attributeTypes'.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder setAttributeTypes(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.attributeTypes = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'attributeTypes' field has been set.
      * @return True if the 'attributeTypes' field has been set, false otherwise.
      */
    public boolean hasAttributeTypes() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'attributeTypes' field.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder clearAttributeTypes() {
      attributeTypes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributeDefaultClassifications' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAttributeDefaultClassifications() {
      return attributeDefaultClassifications;
    }

    /**
      * Sets the value of the 'attributeDefaultClassifications' field.
      * @param value The value of 'attributeDefaultClassifications'.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder setAttributeDefaultClassifications(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.attributeDefaultClassifications = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'attributeDefaultClassifications' field has been set.
      * @return True if the 'attributeDefaultClassifications' field has been set, false otherwise.
      */
    public boolean hasAttributeDefaultClassifications() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'attributeDefaultClassifications' field.
      * @return This builder.
      */
    public mil.nga.giat.geowave.adapter.vector.avro.FeatureDefinition.Builder clearAttributeDefaultClassifications() {
      attributeDefaultClassifications = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public FeatureDefinition build() {
      try {
        FeatureDefinition record = new FeatureDefinition();
        record.featureTypeName = fieldSetFlags()[0] ? this.featureTypeName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.attributeNames = fieldSetFlags()[1] ? this.attributeNames : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.attributeTypes = fieldSetFlags()[2] ? this.attributeTypes : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.attributeDefaultClassifications = fieldSetFlags()[3] ? this.attributeDefaultClassifications : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
